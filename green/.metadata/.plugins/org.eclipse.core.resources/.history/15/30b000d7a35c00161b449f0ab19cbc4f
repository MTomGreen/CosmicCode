package green.math;

import green.detector.Detector;
import green.objects.Coincidence;
import green.objects.HitEvent;
import green.util.DetectorUtils;
import net.danceswithcode.Coord;

public class RayMath {
	
	public static void getAngleFromCoincidence(Coincidence c){
		HitEvent EventA = c.events.get(0);
		HitEvent EventB = c.events.get(1);
		HitEvent EventC = c.events.get(2);
		
		double timeA = EventA.nanosAfter; //absolute
		double timeB = EventB.nanosAfter - timeA; //relative
		double timeC = EventC.nanosAfter - timeA; //relative
		
		Detector stationA = DetectorUtils.getDetectorFromID(EventA.detectorID);
		Detector stationB = DetectorUtils.getDetectorFromID(EventB.detectorID); //Station is just easier to type than detector.
		Detector stationC = DetectorUtils.getDetectorFromID(EventC.detectorID);
		
		
		double[] posA = Coord.geo_to_ecef(stationA.getLatitudeInRadians(), stationA.getLongitudeInRadians(), stationA.getAltitude());
		double[] posB = Coord.geo_to_ecef(stationB.getLatitudeInRadians(), stationB.getLongitudeInRadians(), stationB.getAltitude());
		double[] posC = Coord.geo_to_ecef(stationC.getLatitudeInRadians(), stationC.getLongitudeInRadians(), stationC.getAltitude());
		
		VectorDouble PosA = new VectorDouble(0,0);
		VectorDouble PosB = new VectorDouble(posB[0] - posA[0], posB[1]-posA[1]);
		VectorDouble PosC = new VectorDouble(posC[0] - posA[0], posC[1] - posA[1]);
		
		double m = (PosC.getY()*timeB-PosB.getY()*timeC) / (PosC.getX() * timeB - PosB.getX() * timeC);
		System.out.println(m);
		
		
	}

}
